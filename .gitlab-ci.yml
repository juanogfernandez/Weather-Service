# Definición de stages de pipelines
stages:
  - test
  - build
  - deploy

variables:
  TAG_LATEST: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME:latest
  TAG_COMMIT: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME:$CI_COMMIT_SHORT_SHA
  APP: weather-service

# Job encargado del build de la imagen productiva y el push a la registry de imágenes dentro del repositorio de Gitlab
build:
  image: docker:latest
  stage: build
  services:
    - docker:dind
  script:
    - docker build --no-cache -t $TAG_LATEST -t $TAG_COMMIT .
    - echo "$CI_JOB_TOKEN" | docker login $CI_REGISTRY -u $CI_REGISTRY_USER --password-stdin
    - docker push $TAG_COMMIT
    - docker push $TAG_LATEST

# Job encargado de deploy en servidor, utilizando llave privada guardada en el repositorio (privado) de Gitlab
# Realiza la conexión al servidor por ssh, se loguea a la registry del repositorio de Gitlab, pullea imagen taggeada,
# detiene contenedor con versión anterior (en caso de existir) y levanta un contenedor con la nueva versión
# Job corre solo en la rama main
deploy:
  image: alpine:latest
  stage: deploy
  tags:
    - deployment
  before_script:
    - chmod 600 $ID_RSA
    - apk update
    - apk add openssh-client
    - apk add docker docker-compose
  script:
    - |
      ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP << EOF
        echo "$CI_JOB_TOKEN" | docker login $CI_REGISTRY -u $CI_REGISTRY_USER --password-stdin
        
        docker pull $TAG_COMMIT

        if [ \$(docker ps -q -f name=${APP}) ]; then
          echo "Container ${APP} is running. Stopping and removing it..."
          docker stop ${APP}
          docker rm ${APP}
        fi

        cd /projects/${APP}
        docker compose up -d
      EOF
  environment:
    name: production
    url: https://${APP}.andes.coop.ar
  only:
    - main
